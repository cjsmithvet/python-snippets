from __future__ import print_function
import socket
import struct
import sys

#
# Create a UDP SOCKET
#

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(5)

#
# Define the DESTINATION
# 

# hardcode for work-at-home
# server_address = ('10.0.0.166', 5002)
# doesn't work: broadcast blocked by firewall?
server_address = ('10.0.255.255', 5002)
# doesn't work: broadcast blocked by firewall?
# server_address = ('10.0.0.255', 5002)

#
# Create the MESSAGE
# 

# doesn't work: this is a "set"
# message = {0x12, 0xaf, 0x12, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x30, 0x2e, 0x30,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x03, 0x00, 0x00}
# doesn't work: this is a "list"
# message = [0x12, 0xaf, 0x12, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x30, 0x2e, 0x30,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x03, 0x00, 0x00]
# doesn't work: "not all arguments converted during string formatting"
# message = (0x12, 0xaf, 0x12, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x30, 0x2e, 0x30,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x03, 0x00, 0x00)

message = bytearray([0x12, 0xaf, 0x12, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e, 0x30, 0x2e, 0x30,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x03, 0x00, 0x00])

#
# See who's out there
#

try:

    # Send data
    print ('sending "%s"' % message)
    sys.stdout.flush()
    sent = sock.sendto(message, server_address)

    # Receive response
    print ('waiting to receive')
    sys.stdout.flush()
    data, server = sock.recvfrom(4096)
    print ('received "%s"' % data)
    sys.stdout.flush()

except:
    pass

finally:
    # print >>sys.stderr, 'closing socket'
    print ('closing socket')
    sys.stdout.flush()
    sock.close()
